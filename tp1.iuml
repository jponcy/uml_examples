@startuml TP0
!include ./config/params.iuml

class ClassA {
    -id: int {autogenerated}
    #name: string
    +objet: TypeClass
}

class ClassB {
    +ClassB()
    +A(): string
    +B(valeur: float): boolean
    -C()
}

class ClassC {
    -id: int {autogenerated}
    #name: string
    +objet: TypeClass
    +ClassC()
    +A(): string
    +B(valeur: float): boolean
    -C()
}
@enduml


@startuml TP1
!include ./config/params.iuml

class ClassD {
    {static}-count: int
    {static}+getCount(): int
}

abstract class ClassE <<abstract>> {
    +loaded()
}

class ClassF {
    -id: int {autogenerated}
    #name: string
    +objet: TypeClass
    {static}-count: int
    {static}+getCount(): int
    +ClassF()
    +A(): string
    +B(valeur: float): boolean
    -C()
}
@enduml


@startuml TP2
!include ./config/params.iuml

interface InterfaceA {
    B(): boolean
}

class Civility <<enumeration>> {
    M
    Mme
    +getFullName(): string
}
@enduml


@startuml TP3
!include ./config/params.iuml

class Civility <<enumeration>> {
    M
    Mme
    +getFullName(): string
}

class Personne {
    #id: int {autogenerated}
    #firstname: string
    #lastname: string
    #dateOfBirth: Date
    +getCompleteName(): string
}

note left: getCompleteName retourne\ncivility + firstname + lastname

class Utilisateur extends Personne {
    -login: string
    -password: string {encoded}
    -memberSince: Date
    +login(login: string, password: string): boolean
}

Personne -> "1\ncivility" Civility
@enduml


@startuml TP4
!include ./config/params.iuml

abstract class Roulant {
    -count: int
    +park()
    +unparck()
}

interface Vehicule {
    +moveTo(volu: int)
    +speed(vitesse: int)
}

class Voiture extends Roulant implements Vehicule {
    +moveTo(volu: int)
    +speed(vitesse: int)
}

@enduml
